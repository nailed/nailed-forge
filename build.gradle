buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "reening"
            url = "http://maven.reening.nl"
        }
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.1-SNAPSHOT'
        //classpath 'jk_5.nailed.gradle:nailed-gradle:1.1-SNAPSHOT'
    }
}

apply plugin: 'java'
apply plugin: 'forge'
//apply plugin: 'nailed'
apply plugin: 'maven'
apply plugin: 'idea'

version = '2.0-SNAPSHOT'

minecraft{
    version = '1.7.2-10.12.0.999'
    assetDir = 'runtime/client/assets'
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            name = "reening"
            url = "http://maven.reening.nl/"
        }
        maven {
            name 'forge'
            url 'http://files.minecraftforge.net/maven'
        }
        maven {
            name "minecraft"
            url "https://libraries.minecraft.net/"
        }
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.6'
    targetCompatibility = '1.6'

    ext.ats = []

    configurations{
        packed
        compile.extendsFrom packed
    }

    jar {
        baseName = 'Nailed-' + baseName
        destinationDir = new File(rootProject.getBuildDir(), 'libs')

        manifest {
            attributes 'version': project.version
            attributes 'mcversion': rootProject.minecraft.version
        }

        from {
            configurations.packed.collect {
                it.isDirectory() ? it : zipTree(it).matching {
                    exclude "META-INF", "META-INF/**", "*META-INF*", "meta-inf"
                    exclude "**.jar", "**/*.jar", "*.jar"
                }
            }
        }
    }

    dependencies {
        compile rootProject
        compile 'org.projectlombok:lombok:1.12.2'

        testCompile 'junit:junit:4.11'
    }

    rootProject.tasks.reobf {
        reobf(tasks.jar) { spec ->
            spec.classpath = sourceSets.main.compileClasspath
        }
    }

    sourceSets.main.resources.getFiles().each { file ->
        if (file.getName().endsWith(".at") || file.getName().endsWith("_at.cfg")){
            ats += file.getName();
            rootProject.minecraft.at file.getPath()
        }
    }

    processResources {
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'
            include 'version.properties'
            expand 'version': project.version, 'mcversion': project.minecraft.version
        }
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
            exclude 'version.properties'
        }
    }
}
